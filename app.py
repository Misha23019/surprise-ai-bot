from flask import Flask, request
import requests
import os
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import random
import json
from datetime import datetime, timedelta
from collections import defaultdict

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–ª—é—á–∏ API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö API –∫–ª—é—á—ñ–≤!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

app = Flask(__name__)

# –ü–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–ª –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–±–Ω—É–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
user_limits = defaultdict(lambda: {"count": 0, "reset": datetime.utcnow().date()})

# –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
content_list = [
    "üé¨ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", "üéß –ú—É–∑–∏–∫–∞", "üìö –¶–∏—Ç–∞—Ç–∞ –∑ –∫–Ω–∏–≥–∏",
    "üåê –ú–∞–ª–æ–≤—ñ–¥–æ–º–∏–π —Å–∞–π—Ç", "üß† –¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç", "üòÇ –ñ–∞—Ä—Ç",
    "üïµÔ∏è –ú—ñ—Å—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", "üñºÔ∏è –¢–≤—ñ—Ä –º–∏—Å—Ç–µ—Ü—Ç–≤–∞", "üéôÔ∏è –ü–æ–¥–∫–∞—Å—Ç",
    "üéØ –©–æ–¥–µ–Ω–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è", "üßµ –ö–æ—Ä–æ—Ç–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—è", "üí≠ –¢–µ–º–∞ –¥–Ω—è",
    "üç≥ –†–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è"
]

# --- –Ø–ó–´–ö–û–í–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê ---
def get_prompt(user_input, lang="uk"):
    text = user_input.lower()
    if "—Ñ—ñ–ª—å–º" in text or "üé•" in text:
        return "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –¥–∏–≤–Ω—É –π –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—É –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∑ –æ–¥–Ω–∏–º —Å–º—ñ—à–Ω–∏–º –æ–ø–∏—Å–æ–º." if lang == "uk" else \
               "Suggest a weird and unexpected movie title with a funny description."
    elif "–º—É–∑–∏–∫–∞" in text or "üéß" in text:
        return "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –¥–∏–≤–Ω–∏–π –º—É–∑–∏—á–Ω–∏–π –∂–∞–Ω—Ä –∞–±–æ –≥—É—Ä—Ç –∑ –Ω–µ–∑–≤–∏—á–Ω–∏–º –æ–ø–∏—Å–æ–º." if lang == "uk" else \
               "Suggest a bizarre music genre or band with a strange description."
    elif "—Å—é—Ä–ø—Ä–∏–∑" in text or "üé≤" in text:
        return "–ü—Ä–∏–¥—É–º–∞–π –≤–∏–ø–∞–¥–∫–æ–≤—É, –¥–∏–≤–Ω—É —ñ–¥–µ—é-—Å—é—Ä–ø—Ä–∏–∑ —É 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è—Ö." if lang == "uk" else \
               "Create a random, weird surprise idea in 1‚Äì2 sentences."
    else:
        return user_input

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–Ü–î–ü–û–í–Ü–î–Ü ---
def generate_response(user_input, lang="uk"):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = get_prompt(user_input, lang)
    data = {
        "model": "qwen/qwen3-32b:free",
        "messages": [{"role": "user", "content": prompt}]
    }

    response = requests.post(OPENROUTER_API_URL, headers=headers, data=json.dumps(data))

    if response.status_code == 200:
        response_data = response.json()
        if "choices" in response_data:
            return response_data["choices"][0]["message"]["content"]
        else:
            return "ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞."
    else:
        return "ü§ñ –í–∏–±–∞—á, –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."

# --- –û–¢–ü–†–ê–í–ö–ê –†–ê–ù–î–û–ú–ù–û–ì–û –ü–û–°–¢–ê ---
def send_random_post():
    random_content = random.choice(content_list)
    chat_id = "<YOUR_CHAT_ID>"  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID
    response = requests.post(TELEGRAM_API_URL, json={
        "chat_id": chat_id,
        "text": random_content
    })

# --- –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö ---
def start_scheduler():
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_random_post, 'interval', days=1, start_date='2025-05-15 10:00:00')  # 10:00 –ø–æ UTC
    scheduler.start()

# --- –í–ï–ë–•–£–ö –î–õ–Ø –¢–ï–õ–ï–ì–†–ê–ú ---
@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    data = request.get_json()

    if not data or "message" not in data:
        return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", 400

    chat_id = data["message"]["chat"]["id"]
    user_input = data["message"].get("text", "")

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
    today = datetime.utcnow().date()
    user_data = user_limits[chat_id]

    if user_data["reset"] < today:
        user_limits[chat_id] = {"count": 0, "reset": today}
        user_data = user_limits[chat_id]

    if user_data["count"] >= 5:
        msg = "‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –Ω–∞ 5 –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –¥–µ–Ω—å. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∑–∞–≤—Ç—Ä–∞."
        requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": msg})
        return "LIMIT", 200

    reply = generate_response(user_input, lang="uk")
    user_limits[chat_id]["count"] += 1

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Telegram
    keyboard = {
        "keyboard": [
            [{"text": "üé≤ –°—é—Ä–ø—Ä–∏–∑"}, {"text": "üé• –§—ñ–ª—å–º"}],
            [{"text": "üéß –ú—É–∑–∏–∫–∞"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞
    requests.post(TELEGRAM_API_URL, json={
        "chat_id": chat_id,
        "text": reply,
        "reply_markup": keyboard
    })

    return "OK", 200

@app.route("/")
def home():
    return "‚úÖ SurpriseBot –ø—Ä–∞—Ü—é—î —ñ —á–µ–∫–∞—î Telegram-–∑–∞–ø–∏—Ç–∏!"

if __name__ == "__main__":
    start_scheduler()
    app.run(host="0.0.0.0", port=10000)
