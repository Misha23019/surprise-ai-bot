import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types

from modules import (
    get_text,
    can_use,
    ask_gpt,
    get_user,
    schedule_daily_surprise,
    send_surprise,
    default_texts
)
from modules.telegram import router as telegram_router, bot as aiogram_bot
from modules.router import router as main_router
from modules.scheduler import start_scheduler

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-domain.onrender.com
PORT = int(os.getenv("PORT", 8000))
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ .env

if not TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable not set")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ Aiogram ---
dp.include_router(main_router)      # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å—Ç–∞—Ä—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–ø.)
dp.include_router(telegram_router)  # GPT-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

# --- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ) ---
@app.on_event("startup")
async def on_startup():
    if not WEBHOOK_URL:
        logging.error("‚ùå ERROR: WEBHOOK_URL is not set!")
        return

    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL + WEBHOOK_PATH}")

    await start_scheduler()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()
    logging.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω, —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

@app.get("/")
async def root():
    return {"status": "Surprise Me! –±–æ—Ç –ø—Ä–∞—Ü—é—î ü™Ñ"}

@app.post(WEBHOOK_PATH)
async def handle_webhook(request: Request):
    data = await request.json()
    print("==> –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç:", data)  # üëà –î–æ–±–∞–≤—å —ç—Ç–æ
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"status": "ok"}

@app.get(WEBHOOK_PATH)
@app.head(WEBHOOK_PATH)
async def ping_webhook():
    return {"status": "Webhook is alive"}
    
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
