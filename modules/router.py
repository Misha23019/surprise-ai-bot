#surprise-ai-bot/modules/router.py
from aiogram import types, Router, F
from aiogram.filters import CommandStart
from modules.lang import get_text, ask_language, ask_time, LANGUAGES
from modules.limits import can_use, increase
from modules.content import generate_content_from_message, generate_content_from_text
from modules.database import get_user, save_user, save_language, update_user
import re

router = Router()

def main_menu(lang: str) -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é,
    –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
    """
    buttons = [
        ["üéÅ " + get_text(lang, "surprise")],
        ["üé¨ " + get_text(lang, "movie"), "üéµ " + get_text(lang, "music")],
        ["üí¨ " + get_text(lang, "quote"), "üé≤ " + get_text(lang, "random")],
        ["üç≥ " + get_text(lang, "recipe")],
        [get_text(lang, "settings") + " ‚öô"]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=btn) for btn in row] for row in buttons],
        resize_keyboard=True
    )
    return keyboard

@router.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await save_user(user_id)
        await ask_language(message)
    else:
        lang = user.get("lang") or "en"
        await message.answer(get_text(lang, 'menu'), reply_markup=main_menu(lang))

@router.message(F.text.lower().in_({"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚öô –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "settings", "‚öô settings"}))
async def settings_handler(message: types.Message):
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await ask_language(message)

@router.message(F.text.lower().in_({
    "–ø—Ä–∏–≤—ñ—Ç", "hello", "üéÅ —Å—é—Ä–ø—Ä–∏–∑", "üé¨ —Ñ—ñ–ª—å–º", "üéµ –º—É–∑–∏–∫–∞", "üí¨ —Ü–∏—Ç–∞—Ç–∞", "üé≤ —Ä–∞–Ω–¥–æ–º", "üç≥ —Ä–µ—Ü–µ–ø—Ç"
}))
async def content_request(message: types.Message):
    user_id = message.from_user.id
    if not await can_use(user_id):
        lang = (await get_user(user_id)).get("lang", "en")
        await message.answer(get_text(lang, "limit_reached", "–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ üôè"))
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    await increase(user_id)
    await generate_content_from_message(message)

@router.message(lambda message: message.text in LANGUAGES.values())
async def language_selected(message: types.Message):
    user_id = message.from_user.id
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Å —Ñ–ª–∞–≥–æ–º
    lang_code = next((code for code, name in LANGUAGES.items() if name == message.text), "en")
    await save_language(user_id, lang_code)

    await message.answer(get_text(lang_code, "language_chosen", "–ú–æ–≤—É –≤–∏–±—Ä–∞–Ω–æ ‚úÖ"))
    await ask_time(message)

@router.message()
async def handle_time_or_text(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await save_user(user_id)
        await ask_language(message)
        return

    lang = user.get("lang") or "en"
    user_time = user.get("time")

    if not user_time:
        text = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ì–ì:–•–•
        if re.match(r"^\d{1,2}:\d{2}$", text):
            h, m = map(int, text.split(":"))
            if 0 <= h < 24 and 0 <= m < 60:
                await update_user(user_id, {"time": text})
                await message.answer(get_text(lang, "time_saved", "–ß–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ"))
                await message.answer(get_text(lang, 'menu'), reply_markup=main_menu(lang))
            else:
                await message.answer(get_text(lang, "time_format_error", "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•."))
        else:
            await message.answer(get_text(lang, "time_format_error", "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not await can_use(user_id):
        await message.answer(get_text(lang, "limit_reached", "–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ üôè"))
        return

    await increase(user_id)
    reply = await generate_content_from_text(user_id, message.text)
    await message.answer(reply)
