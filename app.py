import os
import logging
import asyncio
from fastapi import FastAPI

from modules import (
    init_db,
    init_limits_table,
    start_scheduler
)
from modules.telegram import router as telegram_router
from modules.router import router as main_router
from modules.bot import bot, dp

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PORT = int(os.getenv("PORT", 8000))
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable not set")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI (—Ç–æ–ª—å–∫–æ –¥–ª—è healthcheck) ---
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "Surprise Me! –±–æ—Ç –ø—Ä–∞—Ü—é—î ü™Ñ"}

@app.get("/healthz")
async def healthcheck():
    return {"status": "ok"}

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ Aiogram ---
dp.include_router(main_router)
dp.include_router(telegram_router)

# --- –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---
@app.on_event("startup")
async def on_startup():
    try:
        await init_db()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    try:
        await init_limits_table()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–º–∏—Ç–æ–≤: {e}")

    try:
        await start_scheduler()
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    asyncio.create_task(dp.start_polling(bot))
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ long polling —Ä–µ–∂–∏–º–µ")
