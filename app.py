from flask import Flask, request
import requests
import os
from dotenv import load_dotenv
from langdetect import detect
import googletrans
from googletrans import Translator

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
if not TELEGRAM_TOKEN or not HUGGINGFACE_API_KEY:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö API –∫–ª—é—á—ñ–≤!")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
HUGGINGFACE_API_URL = "https://api-inference.huggingface.co/models/google/flan-t5-small"

app = Flask(__name__)
translator = Translator()

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ HuggingFace
def generate_response(user_input):
    headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
    if "—Ñ—ñ–ª—å–º" in user_input.lower() or "üé•" in user_input:
        prompt = "Suggest a weird and random movie title with a one-line funny description."
    elif "–º—É–∑–∏–∫–∞" in user_input.lower() or "üéß" in user_input:
        prompt = "Suggest a bizarre and unexpected music genre or band with a strange description."
    elif "—Å—é—Ä–ø—Ä–∏–∑" in user_input.lower() or "üé≤" in user_input:
        prompt = "Give a weird, random, AI-generated surprise idea in 1‚Äì2 sentences."
    else:
        prompt = f"Respond with a funny and strange idea based on: {user_input}"

    data = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 50,
            "temperature": 1.3,
            "top_k": 50,
            "top_p": 0.95,
            "repetition_penalty": 1.3
        }
    }

    response = requests.post(HUGGINGFACE_API_URL, headers=headers, json=data)

   if response.status_code == 200:
        response_data = response.json()
        print("‚úÖ HuggingFace response:", response_data)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if isinstance(response_data, dict) and "generated_text" in response_data:
            return response_data["generated_text"]
        elif isinstance(response_data, list) and "generated_text" in response_data[0]:
            return response_data[0]["generated_text"]
        elif isinstance(response_data, dict) and "data" in response_data:
            return response_data["data"]
        else:
            return "ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞."
    else:
        print(f"‚ùå HuggingFace error: {response.status_code} - {response.text}")
        print("üìõ HuggingFace –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response.text)
        return "ü§ñ –í–∏–±–∞—á, –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."


@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    data = request.get_json()

    if not data or "message" not in data:
        return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", 400

    chat_id = data["message"]["chat"]["id"]
    user_input = data["message"].get("text", "")

    if user_input:
        reply = generate_response(user_input)

        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è Telegram
        keyboard = {
            "keyboard": [
                [{"text": "üé≤ –°—é—Ä–ø—Ä–∏–∑"}, {"text": "üé• –§—ñ–ª—å–º"}],
                [{"text": "üéß –ú—É–∑–∏–∫–∞"}]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ Telegram
        response = requests.post(TELEGRAM_API_URL, json={
            "chat_id": chat_id,
            "text": reply,
            "reply_markup": keyboard
        })

        print(f"üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞: {reply}")
        print("üì§ Telegram API —Å—Ç–∞—Ç—É—Å:", response.status_code)

    return "OK", 200

@app.route("/")
def home():
    return "‚úÖ SurpriseBot –ø—Ä–∞—Ü—é—î —ñ —á–µ–∫–∞—î Telegram-–∑–∞–ø–∏—Ç–∏!"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
