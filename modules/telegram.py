# modules/telegram.py

import logging
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import aiosqlite

from modules.limits import can_use, increase
from modules.gpt_api import ask_gpt
from modules.bot import bot, dp
from modules.lang import get_text

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
logging.info(f"BOT_TOKEN starts with: {BOT_TOKEN[:4]}***")

router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def build_main_keyboard():
    keyboard = [
        [KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑"), KeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç")],
        [KeyboardButton(text="üé¨ –§—ñ–ª—å–º"), KeyboardButton(text="üéµ –ú—É–∑–∏–∫–∞")],
        [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞"), KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º")],
        [KeyboardButton(text="‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def build_settings_keyboard():
    keyboard = [
        [KeyboardButton(text="üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"), KeyboardButton(text="‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- /start ---
@router.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑–∏ –≤—á–∞—Å–Ω–æ, —Å–∫–∞–∂–∏ –º–µ–Ω—ñ —Å–≤—ñ–π –º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):",
        reply_markup=ReplyKeyboardRemove()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM ---
@router.message(F.text.regexp(r"^\d{1,2}:\d{2}$"))
async def handle_time_input(message: Message):
    user_id = message.from_user.id

    try:
        local_time = datetime.strptime(message.text.strip(), "%H:%M")
        now_utc = datetime.utcnow()
        now_local = datetime.now()
        local_offset = now_local - now_utc
        time_utc = (local_time - local_offset).time()
        utc_str = time_utc.strftime("%H:%M")

        async with aiosqlite.connect("db.sqlite3") as db:
            await db.execute("UPDATE users SET time = ? WHERE user_id = ?", (utc_str, user_id))
            await db.commit()

        await message.answer("üïí –ß–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
        await message.answer("üéÅ –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=build_main_keyboard())

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–∞—Å—É: {e}")
        await message.answer("‚õî –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 09:30")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@router.message(F.text == "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def open_settings(message: Message):
    await message.answer("‚öô –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=build_settings_keyboard())

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=build_main_keyboard())

@router.message(F.text == "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É")
async def change_language(message: Message):
    await message.answer("üåê –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É, –≤–≤–µ–¥—ñ—Ç—å /start —â–µ —Ä–∞–∑.")

@router.message(F.text == "‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å")
async def change_time(message: Message):
    await message.answer("‚è∞ –í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–≤–∏–π –º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):", reply_markup=ReplyKeyboardRemove())

# --- GPT-—Å–æ–æ–±—â–µ–Ω–∏—è ---
@router.message(
    F.text & ~F.text.startswith("/") &
    ~F.text.in_([
        "üéÅ –°—é—Ä–ø—Ä–∏–∑", "üç≥ –†–µ—Ü–µ–ø—Ç", "üé¨ –§—ñ–ª—å–º", "üéµ –ú—É–∑–∏–∫–∞",
        "üí¨ –¶–∏—Ç–∞—Ç–∞", "üé≤ –†–∞–Ω–¥–æ–º", "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å", "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"
    ]) & ~F.text.regexp(r"^\d{1,2}:\d{2}$")
)
async def handle_gpt(message: Message):
    user_id = message.from_user.id

    if not await can_use(user_id):
        await message.answer("‚õî –í–∏–±–∞—á, —Ç–∏ –≤–∏—á–µ—Ä–ø–∞–≤ –ª—ñ–º—ñ—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")
        return

    await increase(user_id)
    messages = [{"role": "user", "content": message.text}]
    try:
        response = await ask_gpt(messages)
        await message.answer(response)
    except Exception as e:
        logging.error(f"‚ùå GPT error: {e}", exc_info=True)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# --- –ó–∞–ø–∞—Å–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä ---
@router.message(F.text)
async def fallback(message: Message):
    await message.answer("ü§ñ –ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ –≤–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start.")

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—é—Ä–ø—Ä–∏–∑—É (–¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞) ---
async def send_surprise(user_id: int, lang: str = "en"):
    try:
        response = await ask_gpt([{"role": "user", "content": "Surprise me"}], lang=lang)
        await bot.send_message(user_id, response)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–≤—Ç–æ—Å—é—Ä–ø—Ä–∏–∑—É: {e}", exc_info=True)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---
def setup_handlers(dp: Dispatcher, main_router: Router):
    dp.include_router(main_router)
    dp.include_router(router)

# –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
build_keyboard = build_main_keyboard
