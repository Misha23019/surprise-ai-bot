# modules/router.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from modules.lang import get_text, get_all_languages
from modules.database import get_or_create_user, update_user
from modules.content import generate_surprise, generate_recipe, generate_movie, generate_music, generate_quote, generate_random
from modules.limits import check_daily_limit

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üéÅ " + get_text("surprise", lang))],
            [KeyboardButton("üé¨ " + get_text("movie", lang)), KeyboardButton("üéµ " + get_text("music", lang))],
            [KeyboardButton("üí¨ " + get_text("quote", lang)), KeyboardButton("üé≤ " + get_text("random", lang))],
            [KeyboardButton("üç≥ " + get_text("recipe", lang))],
            [KeyboardButton("‚öô " + get_text("settings", lang))],
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(update.effective_user.id)
    lang = user.get("language")
    
    if not lang:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        buttons = [
            [InlineKeyboardButton(name, callback_data=f"lang_{code}")]
            for code, name in get_all_languages().items()
        ]
        await update.message.reply_text("üåç Choose your language:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        welcome = get_text("welcome", lang)
        await update.message.reply_text(welcome, reply_markup=get_main_menu(lang))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    user = get_or_create_user(user_id)

    if data.startswith("lang_"):
        lang_code = data.split("_", 1)[1]
        update_user(user_id, language=lang_code)
        text = get_text("set_lang_success", lang_code)
        await query.edit_message_text(text)
        await context.bot.send_message(chat_id=user_id, text=get_text("set_time_request", lang_code))
    else:
        await context.bot.send_message(chat_id=user_id, text="‚ö† Unknown action.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = get_or_create_user(user_id)
    lang = user.get("language", "en")

    if text.startswith("‚öô"):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫ –∏ –≤—Ä–µ–º—è
        buttons = [
            [InlineKeyboardButton(name, callback_data=f"lang_{code}")]
            for code, name in get_all_languages().items()
        ]
        await update.message.reply_text("üåç Choose your language:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    if ":" in text and len(text) <= 5:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10:00")
        update_user(user_id, surprise_time=text)
        await update.message.reply_text(get_text("set_time_success", lang), reply_markup=get_main_menu(lang))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if not check_daily_limit(user_id):
        await update.message.reply_text(get_text("limit_reached", lang))
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if "üéÅ" in text:
        await update.message.reply_text(generate_surprise(lang))
    elif "üé¨" in text:
        await update.message.reply_text(generate_movie(lang))
    elif "üéµ" in text:
        await update.message.reply_text(generate_music(lang))
    elif "üí¨" in text:
        await update.message.reply_text(generate_quote(lang))
    elif "üé≤" in text:
        await update.message.reply_text(generate_random(lang))
    elif "üç≥" in text:
        await update.message.reply_text(get_text("recipe_request", lang))  # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    elif "," in text or "–∏" in text or "and" in text:
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        await update.message.reply_text(generate_recipe(text, lang))
    else:
        await update.message.reply_text(get_text("unknown_command", lang))
