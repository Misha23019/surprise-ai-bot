#surprise-ai-bot/app.py
import os
import logging
from fastapi import FastAPI

from modules import (
    get_text,
    can_use,
    ask_gpt,
    get_user,
    schedule_daily_surprise,
    send_surprise,
    default_texts
)
from modules.telegram import router as telegram_router
from modules.router import router as main_router
from modules.scheduler import start_scheduler
from modules.limits import init_limits_table
from modules.database import init_db
from modules.bot import bot, dp

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PORT = int(os.getenv("PORT", 8000))
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable not set")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()

# --- –†–æ—É—Ç–µ—Ä—ã Aiogram ---
dp.include_router(main_router)
dp.include_router(telegram_router)

@app.on_event("startup")
async def on_startup():
    try:
        await init_db()
        await init_limits_table()
        await start_scheduler()
        logging.info("‚úÖ –ë–∞–∑–∞, –ª–∏–º–∏—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    # –ó–∞–ø—É—Å–∫ Long Polling
    import asyncio
    asyncio.create_task(dp.start_polling(bot))
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Long Polling")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
    logging.info("üîå –°–µ—Å—Å–∏—è Telegram –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

@app.get("/")
async def root():
    return {"status": "Surprise Me! –±–æ—Ç –ø—Ä–∞—Ü—é—î ü™Ñ"}

@app.get("/healthz")
async def healthcheck():
    return {"status": "ok"}
