import json
import os

# üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "en": "English",
    "fr": "Fran√ßais",
    "de": "Deutsch",
    "es": "Espa√±ol",
    "it": "Italiano",
    "pl": "Polski",
    "ru": "–†—É—Å—Å–∫–∏–π",
    "ro": "Rom√¢nƒÉ",
    "tr": "T√ºrk√ße",
    "pt": "Portugu√™s",
    "nl": "Nederlands",
    "sv": "Svenska",
    "no": "Norsk",
    "fi": "Suomi",
    "da": "Dansk",
    "cs": "ƒåe≈°tina",
    "sk": "Slovenƒçina",
    "hu": "Magyar",
    "bg": "–ë—ä–ª–≥–∞—Ä—Å–∫–∏",
    "el": "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨",
    "hi": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
    "zh": "‰∏≠Êñá",
    "ja": "Êó•Êú¨Ë™û",
    "ko": "ÌïúÍµ≠Ïñ¥",
}

# üìÅ –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
LANG_FILE = "data/langs.json"
TIME_FILE = "data/user_times.json"

# ====== –†–∞–±–æ—Ç–∞ —Å —è–∑—ã–∫–∞–º–∏ ======

def load_lang_data():
    if os.path.exists(LANG_FILE):
        with open(LANG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_lang_data(data):
    os.makedirs(os.path.dirname(LANG_FILE), exist_ok=True)
    with open(LANG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_lang(user_id):
    data = load_lang_data()
    return data.get(str(user_id), "uk")

def set_user_lang(user_id, lang_code):
    data = load_lang_data()
    data[str(user_id)] = lang_code
    save_lang_data(data)

# ====== –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º ======

def load_time_data():
    if os.path.exists(TIME_FILE):
        with open(TIME_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_time_data(data):
    os.makedirs(os.path.dirname(TIME_FILE), exist_ok=True)
    with open(TIME_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_time(user_id):
    data = load_time_data()
    return data.get(str(user_id))

def set_user_time(user_id, time_str):
    data = load_time_data()
    data[str(user_id)] = time_str
    save_time_data(data)

# ====== –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ======

TEXTS = {
    "uk": {
        "start_choose_lang": "üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é —Ç–∏–ø—É /lang uk\n\nüåê –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏:\n"
                             + "\n".join([f"{k} - {v}" for k, v in LANGUAGES.items()]),
        "language_changed": "‚úÖ –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "ask_time": "‚è∞ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n(–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —â–æ–¥–Ω—è –æ 10:00 –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑!)",
        "surprise": "üé≤ –°—é—Ä–ø—Ä–∏–∑",
        "movie": "üé¨ –§—ñ–ª—å–º",
        "music": "üéµ –ú—É–∑–∏–∫–∞",
        "quote": "üí¨ –¶–∏—Ç–∞—Ç–∞",
        "random": "üîÄ –†–∞–Ω–¥–æ–º",
        "recipe": "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç",
        "change_lang": "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        "change_time": "‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å",
        "ask_ingredients": "ü•¶ –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –∫–∞—Ä—Ç–æ–ø–ª—è, –º–æ—Ä–∫–≤–∞, —Ü–∏–±—É–ª—è):"
    },
    "en": {
        "start_choose_lang": "üëã Welcome! Choose your language using a command like /lang en\n\nüåê Available languages:\n"
                             + "\n".join([f"{k} - {v}" for k, v in LANGUAGES.items()]),
        "language_changed": "‚úÖ Language changed to English",
        "ask_time": "‚è∞ Please enter your current time (HH:MM format).\n(This is used to send you daily AI content at 10:00)",
        "surprise": "üé≤ Surprise",
        "movie": "üé¨ Movie",
        "music": "üéµ Music",
        "quote": "üí¨ Quote",
        "random": "üîÄ Random",
        "recipe": "üçΩÔ∏è Recipe",
        "change_lang": "üåê Change Language",
        "change_time": "‚è∞ Change Time",
        "ask_ingredients": "ü•¶ Enter ingredients separated by commas (e.g., potatoes, carrots, onion):"
    },
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_text(lang_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    return TEXTS.get(lang_code, TEXTS["uk"])
