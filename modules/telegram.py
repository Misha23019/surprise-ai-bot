# modules/telegram.py
import logging
import os
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from modules.limits import can_use, increase
from modules.gpt_api import ask_gpt

logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

logging.info(f"BOT_TOKEN starts with: {BOT_TOKEN[:4]}***")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –†–æ—É—Ç–µ—Ä –¥–ª—è GPT-—Å–æ–æ–±—â–µ–Ω–∏–π ---
router = Router()

@router.message(F.text & ~F.text.startswith("/"))
async def handle_message(message: Message):
    user_id = message.from_user.id
    if not await can_use(user_id):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    await increase(user_id)

    messages = [{"role": "user", "content": message.text}]
    try:
        response = await ask_gpt(messages)
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—é—Ä–ø—Ä–∏–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ scheduler) ---
async def send_surprise(user_id: int, lang: str = "en"):
    try:
        response = await ask_gpt([{"role": "user", "content": "Surprise me"}], lang=lang)
        await bot.send_message(user_id, response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ—Å—é—Ä–ø—Ä–∏–∑–∞: {e}", exc_info=True)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ---
def build_keyboard():
    keyboard = [
        [KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑"), KeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç")],
        [KeyboardButton(text="üé¨ –§—ñ–ª—å–º"), KeyboardButton(text="üéµ –ú—É–∑–∏–∫–∞")],
        [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞"), KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º")],
        [KeyboardButton(text="‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
def setup_handlers(dp: Dispatcher, main_router: Router):
    dp.include_router(main_router)
    dp.include_router(router)

@router.message(F.text)
async def debug_all(message: Message):
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message.text)
    await message.answer("–û—Ç–ª–∞–¥–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
